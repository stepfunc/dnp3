name: CI
on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
jobs:
  # Check formatting and run clippy lints
  linting:
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
  # Lock the dependencies
  lock:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: dnp3
      - name: Checkout complicense
        uses: actions/checkout@v2
        with:
          repository: stepfunc/complicense
          path: complicense
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Install cargo-license
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-license
      - name: Update dependencies
        working-directory: dnp3
        run: cargo update
      - name: Generate dependencies.json
        working-directory: dnp3/dnp3
        run: cargo-license --avoid-dev-deps --avoid-build-deps -j > ../dependencies.json
      - name: Generate dependencies.txt
        working-directory: complicense
        run: cargo run -- --import ../dnp3/dependencies.json --config ../dnp3/deps-config.json --token ${{ github.token }} > ../dnp3/dependencies.txt
      - name: Upload dependencies info
        uses: actions/upload-artifact@v2
        with:
          name: dependencies
          path: |
            dnp3/Cargo.lock
            dnp3/dependencies.json
            dnp3/dependencies.txt
  # Run the unit tests on Windows and Linux
  test:
    needs: lock
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        rust:
          - stable
          - beta
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Copy Windows config
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: Copy-Item -Path .cargo/config-windows.toml -Destination .cargo/config.toml
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Run Rust unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
  # Build bindings on Linux x64 [64-bit Linux (kernel 2.6.32+, glibc 2.11+) (x86_64-unknown-linux-gnu)]
  bindings-linux:
    needs: lock
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install doxygen 1.9.3
        run: wget -q https://www.doxygen.nl/files/doxygen-1.9.3.linux.bin.tar.gz -O- | sudo tar --strip-components=1 -C /usr -xz doxygen-1.9.3
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: C bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --c --doxygen
      - name: .NET bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --dotnet --doxygen
      - name: Java bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --java
      - name: Extract documentation
        run: |
          mkdir -p ~/doc
          cp -a ffi/bindings/c/generated/doc/c ~/doc/c
          cp -a ffi/bindings/c/generated/doc/cpp ~/doc/cpp
          cp -a ffi/bindings/dotnet/dnp3/doc ~/doc/dotnet
          cp -a ffi/bindings/java/dnp3/target/apidocs ~/doc/java
          rm ffi/bindings/c/generated/logo.png ffi/bindings/c/generated/doxygen-awesome.css
      - name: Upload compiled FFI modules
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/c/generated/x86_64-unknown-linux-gnu/lib
      - name: Upload C bindings
        uses: actions/upload-artifact@v2
        with:
          name: c-bindings
          path: ffi/bindings/c/generated
      - name: Upload compiled Java bindings
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/java/dnp3/src/main/resources
      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: doc
          path: ~/doc
  # Build bindings on Windows x64 [64-bit MSVC (Windows 7+) (x86_64-pc-windows-msvc)]
  bindings-windows:
    needs: lock
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Copy Windows config
        shell: pwsh
        run: Copy-Item -Path .cargo/config-windows.toml -Destination .cargo/config.toml
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: C bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --c
      - name: .NET bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --dotnet
      - name: Java bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --java
      - name: Upload compiled FFI modules
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/c/generated/x86_64-pc-windows-msvc/lib
      - name: Upload C bindings
        uses: actions/upload-artifact@v2
        with:
          name: c-bindings
          path: ffi/bindings/c/generated
      - name: Upload compiled Java bindings
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/java/dnp3/src/main/resources
  # Build bindings on MacOS [64-bit macOS (10.7+, Lion+) (x86_64-apple-darwin)]
  bindings-macos:
    needs: lock
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: C bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --c
      - name: .NET bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --dotnet
      - name: Java bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --java
      - name: Upload compiled FFI modules
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/c/generated/x86_64-apple-darwin/lib
      - name: Upload C bindings
        uses: actions/upload-artifact@v2
        with:
          name: c-bindings
          path: ffi/bindings/c/generated
      - name: Upload compiled Java bindings
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/java/dnp3/src/main/resources
  # Build bindings on Linux AArch64
  bindings-aarch64:
    needs: lock
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: aarch64-unknown-linux-gnu
          override: true
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target aarch64-unknown-linux-gnu
      - name: C bindings
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: run
          args: --release --target aarch64-unknown-linux-gnu --bin dnp3-bindings -- --c --no-tests
      - name: .NET bindings
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: run
          args: --release --target aarch64-unknown-linux-gnu --bin dnp3-bindings -- --dotnet --no-tests
      - name: Java bindings
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: run
          args: --release --target aarch64-unknown-linux-gnu --bin dnp3-bindings -- --java --no-tests
      - name: Upload compiled FFI modules
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/c/generated/aarch64-unknown-linux-gnu/lib
      - name: Upload C bindings
        uses: actions/upload-artifact@v2
        with:
          name: c-bindings
          path: ffi/bindings/c/generated
      - name: Upload compiled Java bindings
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/java/dnp3/src/main/resources
  # Cross-compilation for ARM devices and produce C bindings
  cross:
    needs: lock
    strategy:
      fail-fast: false
      matrix:
        target:
          - arm-unknown-linux-gnueabi # ARMv6 Linux (kernel 3.2, glibc 2.17)
          - arm-unknown-linux-gnueabihf # ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)
          - armv7-unknown-linux-gnueabihf # ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}
      - name: C bindings
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: run
          args: --release --target ${{ matrix.target }} --bin dnp3-bindings -- --c --no-tests
      - name: Upload compiled FFI modules
        uses: actions/upload-artifact@v2
        with:
          name: ffi-modules
          path: ffi/bindings/c/generated/${{ matrix.target }}/lib
      - name: Upload C bindings
        uses: actions/upload-artifact@v2
        with:
          name: c-bindings
          path: ffi/bindings/c/generated
  guide:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        working-directory: guide
        run: yarn install
      - name: Build guide
        working-directory: guide
        run: |
         yarn build
         mkdir -p ~/doc/guide
         mv build/* ~/doc/guide
      - name: Upload guide
        uses: actions/upload-artifact@v2
        with:
          name: doc
          path: ~/doc
  # Package all the generated bindings
  packaging:
    needs: [lock, bindings-linux, bindings-windows, bindings-macos, bindings-aarch64, cross]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Download compiled FFI
        uses: actions/download-artifact@v2
        with:
          name: ffi-modules
          path: ffi-modules
      - name: Package all bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin dnp3-bindings -- --package ./ffi-modules -f dependencies.txt
      - name: Upload .NET bindings
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-bindings
          path: ffi/bindings/dotnet/nupkg/*
      - name: Upload Java bindings
        uses: actions/upload-artifact@v2
        with:
          name: java-bindings
          path: ffi/bindings/java/dnp3/target/*.jar
      - name: Upload Java pom.xml
        uses: actions/upload-artifact@v2
        with:
          name: java-bindings
          path: ffi/bindings/java/dnp3/pom.xml
  # Run the conformance tests
  conformance:
    needs: lock
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Caching
        uses: Swatinem/rust-cache@v1
      - name: Download Cargo.lock
        uses: actions/download-artifact@v2
        with:
          name: dependencies
      - name: Build Java bindings
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --bin dnp3-bindings -- --java
      - name: Install Java bindings
        shell: bash
        run: (cd ffi/bindings/java/dnp3 && sudo mvn install)
      - name: Checkout dnp4s
        uses: actions/checkout@v2
        with:
          repository: stepfunc/dnp4s
          ssh-key: ${{ secrets.DNP4S_SSH_KEY }}
          ref: scala-2.13
          path: dnp4s
      - name: Build dnp4s
        working-directory: dnp4s
        run: sudo mvn --batch-mode install
      - name: Run the conformance tests
        working-directory: conformance
        run: sudo mvn --batch-mode scala:run
      - name: Upload conformance test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: conformance-results
          path: conformance/results
  release:
    needs: [packaging, conformance, guide]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Checkout stepfunc/docs
        uses: actions/checkout@v2
        with:
          repository: stepfunc/docs
          ssh-key: ${{ secrets.SFIO_DOCS_SSH_KEY }}
          path: docs
      - name: Upload docs
        working-directory: docs
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          rm -rf ./dnp3/${GITHUB_REF##*/}
          cp -a ../artifacts/doc/* ./dnp3/${GITHUB_REF##*/}
          git add -A
          git commit -m "[dnp3] Release ${GITHUB_REF##*/}"
          git push
      - name: Import PGP key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.SFIO_PGP_PRIVATE_KEY }}
          passphrase: ${{ secrets.SFIO_PGP_PRIVATE_KEY_PASSPHRASE }}
      - name: Login to OSSRH
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          servers: '[{ "id": "ossrh", "username": "${{ secrets.SFIO_OSSRH_USERNAME }}", "password": "${{ secrets.SFIO_OSSRH_PASSWORD }}" }]'
      - name: Deploy Java
        shell: bash
        working-directory: artifacts/java-bindings
        run: >
          shopt -s extglob &&
          mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=ossrh -DpomFile=pom.xml -Dfile=$(find dnp3-+([0-9]).+([0-9]).+([0-9]).jar) &&
          mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=ossrh -DpomFile=pom.xml -Dfile=$(find dnp3-+([0-9]).+([0-9]).+([0-9])-sources.jar) -Dclassifier=sources &&
          mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=ossrh -DpomFile=pom.xml -Dfile=$(find dnp3-+([0-9]).+([0-9]).+([0-9])-javadoc.jar) -Dclassifier=javadoc
      - name: Publish NuGet package
        shell: bash
        run: dotnet nuget push $(find artifacts/dotnet-bindings/dnp3*.nupkg) -s https://api.nuget.org/v3/index.json -k ${{ secrets.SFIO_NUGET_KEY }}
      - name: Package C bindings and conformance results
        shell: bash
        run: >
          mkdir release &&
          for i in artifacts/c-bindings/*; do (cd $i && zip -r ../../../release/dnp3-${GITHUB_REF##*/}-$(basename $i).zip .); done &&
          (cd artifacts/conformance-results && zip -r ../../release/conformance-results.zip .)
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            release/*.zip
            artifacts/dotnet-bindings/dnp3*
            artifacts/java-bindings/*.jar
            artifacts/dependencies/dependencies.txt
            artifacts/dependencies/dependencies.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
